templates {
  node "polar_hopf" {
    f = 1
    omega = "2 * pi * f"

    p' = "omega"

       mu = 1
    gamma = 5

     r = "mu"
    r' = "gamma * (mu - r^2) * r"

    x = "r * cos(p)"
  }

  edge "polar_coupling" {
    bias = 0
    weight = 1

    p' += "weight * input.r *
           sin(input.p - output.p - bias)"
  }
}

# Define a macro 'n'. Its value can be used later
# using the @n syntax.
defines {
  n = "5"
}

node "h{1:@n}" : polar_hopf {
  p = "rand(-pi, pi)"
  r = 0.001
}

<bidirectional>
edge from "h{1:@n}" to "h$(@1 + 1)" : polar_coupling {
  s = [-1, 1]
  bias = "s * $(2 * pi / @n)"
}
