<?xml version='1.0' encoding='utf-8'?>
<category xmlns:gobject="http://jessevdk.github.com/cldoc/gobject/1.0" id="API Reference" name="API Reference" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>libcodyn API reference documentation.</brief>
  <doc>libcodyn is the underlying [GObject C][]
library on which all the codyn tools are built. You can use the API described
on these pages to create, load and manipulate codyn networks. For a high-level
introduction to libcodyn, please see <ref ref="Manual::libcodyn#Manual::libcodyn">libcodyn</ref>.

[GObject C]: https://developer.gnome.org/gobject/stable/


</doc>
  <gobject:interface name="CdnAnnotatable" ref="API Reference::CdnAnnotatable#API Reference::CdnAnnotatable">
    <brief>Interface for annotating objects</brief>
  </gobject:interface>
  <enum anonymous="yes" id="API Reference::CdnAnnotationAnchor" name="CdnAnnotationAnchor" typedef="yes">
    <brief>Annotation anchor determines relative to where the annotatio</brief>
    <doc>Annotation anchor determines relative to where the annotation
is shown.</doc>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_NORTH" name="CDN_ANNOTATION_ANCHOR_NORTH" value="0">
      <brief>north</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_NORTH_EAST" name="CDN_ANNOTATION_ANCHOR_NORTH_EAST" value="1">
      <brief>north east</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_EAST" name="CDN_ANNOTATION_ANCHOR_EAST" value="2">
      <brief>east</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_SOUTH_EAST" name="CDN_ANNOTATION_ANCHOR_SOUTH_EAST" value="3">
      <brief>south east</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_SOUTH" name="CDN_ANNOTATION_ANCHOR_SOUTH" value="4">
      <brief>south</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_SOUTH_WEST" name="CDN_ANNOTATION_ANCHOR_SOUTH_WEST" value="5">
      <brief>south west</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_WEST" name="CDN_ANNOTATION_ANCHOR_WEST" value="6">
      <brief>west</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_NORTH_WEST" name="CDN_ANNOTATION_ANCHOR_NORTH_WEST" value="7">
      <brief>north west</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnAnnotationAnchor::CDN_ANNOTATION_ANCHOR_CENTER" name="CDN_ANNOTATION_ANCHOR_CENTER" value="8">
      <brief>center</brief>
    </enumvalue>
  </enum>
  <gobject:boxed name="CdnAnnotationInfo" ref="API Reference::CdnAnnotationInfo#API Reference::CdnAnnotationInfo">
    <brief>Annotation informatio</brief>
  </gobject:boxed>
  <gobject:class name="CdnAttribute" ref="API Reference::CdnAttribute#API Reference::CdnAttribute">
    <brief>Cdn format attribute</brief>
  </gobject:class>
  <gobject:class name="CdnCfileStream" ref="API Reference::CdnCfileStream#API Reference::CdnCfileStream">
    <brief>An output stream implementation for C FILE streams</brief>
  </gobject:class>
  <gobject:class name="CdnCompileContext" ref="API Reference::CdnCompileContext#API Reference::CdnCompileContext">
    <brief>The expression compile contex</brief>
  </gobject:class>
  <gobject:class name="CdnCompileError" ref="API Reference::CdnCompileError#API Reference::CdnCompileError">
    <brief>Compile error message container</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnCompileErrorCode" name="CdnCompileErrorCode" typedef="yes">
    <brief>Enum used to indicate the type of compile error</brief>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_VARIABLE_NOT_FOUND" name="CDN_COMPILE_ERROR_VARIABLE_NOT_FOUND" value="0">
      <brief>variable not found</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_FUNCTION_NOT_FOUND" name="CDN_COMPILE_ERROR_FUNCTION_NOT_FOUND" value="1">
      <brief>function not found</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_OPERATOR_NOT_FOUND" name="CDN_COMPILE_ERROR_OPERATOR_NOT_FOUND" value="2">
      <brief>operator not found</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_INVALID_TOKEN" name="CDN_COMPILE_ERROR_INVALID_TOKEN" value="3">
      <brief>invalid token</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_MAXARG" name="CDN_COMPILE_ERROR_MAXARG" value="4">
      <brief>maximum number of arguments exceeded</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_INVALID_STACK" name="CDN_COMPILE_ERROR_INVALID_STACK" value="5">
      <brief>invalid stack produced</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_VARIABLE_RECURSE" name="CDN_COMPILE_ERROR_VARIABLE_RECURSE" value="6">
      <brief>variable recurses on itself</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_INVALID_ARGUMENTS" name="CDN_COMPILE_ERROR_INVALID_ARGUMENTS" value="7">
      <brief>invalid arguments to function</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_INVALID_DIMENSION" name="CDN_COMPILE_ERROR_INVALID_DIMENSION" value="8" />
    <enumvalue id="API Reference::CdnCompileErrorCode::CDN_COMPILE_ERROR_NUM_ERRORS" name="CDN_COMPILE_ERROR_NUM_ERRORS" value="9">
      <brief>num errors</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnDebugSection" name="CdnDebugSection" typedef="yes">
    <brief>Various levels of debugging.</brief>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_LINSOLVE" name="CDN_DEBUG_LINSOLVE" value="256">
      <brief>linsolve</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_DIFF" name="CDN_DEBUG_DIFF" value="512">
      <brief>diff</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_SIMPLIFY" name="CDN_DEBUG_SIMPLIFY" value="1024">
      <brief>simplify</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_IO" name="CDN_DEBUG_IO" value="2048">
      <brief>io</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_MATH" name="CDN_DEBUG_MATH" value="4096">
      <brief>math</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnDebugSection::CDN_DEBUG_INTEGRATOR" name="CDN_DEBUG_INTEGRATOR" value="8192">
      <brief>integrator</brief>
    </enumvalue>
  </enum>
  <gobject:boxed name="CdnDimension" ref="API Reference::CdnDimension#API Reference::CdnDimension">
    <brief>A dimensio</brief>
  </gobject:boxed>
  <gobject:class name="CdnEdge" ref="API Reference::CdnEdge#API Reference::CdnEdge">
    <brief>Connection between two nodes</brief>
  </gobject:class>
  <gobject:class name="CdnEdgeAction" ref="API Reference::CdnEdgeAction#API Reference::CdnEdgeAction">
    <brief>Edge action equation</brief>
  </gobject:class>
  <gobject:class name="CdnEmbeddedString" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString">
    <brief>Embedded string class</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnEmbeddedStringError" name="CdnEmbeddedStringError" typedef="yes">
    <brief>Embedded string error codes.</brief>
    <enumvalue id="API Reference::CdnEmbeddedStringError::CDN_EMBEDDED_STRING_ERROR_BRACES" name="CDN_EMBEDDED_STRING_ERROR_BRACES" value="0">
      <brief>non matching braces</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringError::CDN_EMBEDDED_STRING_ERROR_INVALID_EXPANSION" name="CDN_EMBEDDED_STRING_ERROR_INVALID_EXPANSION" value="1">
      <brief>invalid expansion</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnEmbeddedStringNodeType" name="CdnEmbeddedStringNodeType" typedef="yes">
    <brief>Types of embedded string nodes.</brief>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_TEXT" name="CDN_EMBEDDED_STRING_NODE_TEXT" value="0">
      <brief>text</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_EQUATION" name="CDN_EMBEDDED_STRING_NODE_EQUATION" value="1">
      <brief>equation</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_INDIRECTION" name="CDN_EMBEDDED_STRING_NODE_INDIRECTION" value="2">
      <brief>indirection</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_REDUCE" name="CDN_EMBEDDED_STRING_NODE_REDUCE" value="3">
      <brief>reduce</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_MAP" name="CDN_EMBEDDED_STRING_NODE_MAP" value="4">
      <brief>map</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnEmbeddedStringNodeType::CDN_EMBEDDED_STRING_NODE_CONDITION" name="CDN_EMBEDDED_STRING_NODE_CONDITION" value="5">
      <brief>condition</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnEvent" ref="API Reference::CdnEvent#API Reference::CdnEvent">
    <brief>Event class</brief>
  </gobject:class>
  <gobject:boxed name="CdnEventLogicalNode" ref="API Reference::CdnEventLogicalNode#API Reference::CdnEventLogicalNode">
    <brief>Logical event condition nod</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnEventSetVariable" ref="API Reference::CdnEventSetVariable#API Reference::CdnEventSetVariable">
    <brief>Event set variable</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnExpansion" ref="API Reference::CdnExpansion#API Reference::CdnExpansion">
    <brief>Expansion class</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnExpansionContext" ref="API Reference::CdnExpansionContext#API Reference::CdnExpansionContext">
    <brief>Expansion context</brief>
  </gobject:boxed>
  <gobject:class name="CdnExpression" ref="API Reference::CdnExpression#API Reference::CdnExpression">
    <brief>Mathematical expression evaluation</brief>
  </gobject:class>
  <gobject:boxed name="CdnExpressionTreeIter" ref="API Reference::CdnExpressionTreeIter#API Reference::CdnExpressionTreeIter">
    <brief>Expression tree iterator</brief>
  </gobject:boxed>
  <enum anonymous="yes" id="API Reference::CdnExpressionTreeIterDeriveError" name="CdnExpressionTreeIterDeriveError" typedef="yes">
    <brief>Tree iter derivation errors.</brief>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveError::CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_UNSUPPORTED" name="CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_UNSUPPORTED" value="0">
      <brief>unsupported</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveError::CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_INVALID" name="CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_INVALID" value="1">
      <brief>invalid</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveError::CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_FUNCTION" name="CDN_EXPRESSION_TREE_ITER_DERIVE_ERROR_FUNCTION" value="2">
      <brief>function</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnExpressionTreeIterDeriveFlags" name="CdnExpressionTreeIterDeriveFlags" typedef="yes">
    <brief>Flags for tree iter derivation.</brief>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveFlags::CDN_EXPRESSION_TREE_ITER_DERIVE_NONE" name="CDN_EXPRESSION_TREE_ITER_DERIVE_NONE" value="0">
      <brief>none</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveFlags::CDN_EXPRESSION_TREE_ITER_DERIVE_PARTIAL" name="CDN_EXPRESSION_TREE_ITER_DERIVE_PARTIAL" value="1">
      <brief>partial</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveFlags::CDN_EXPRESSION_TREE_ITER_DERIVE_TIME" name="CDN_EXPRESSION_TREE_ITER_DERIVE_TIME" value="2">
      <brief>time</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnExpressionTreeIterDeriveFlags::CDN_EXPRESSION_TREE_ITER_DERIVE_SIMPLIFY" name="CDN_EXPRESSION_TREE_ITER_DERIVE_SIMPLIFY" value="4">
      <brief>simplify</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnFunction" ref="API Reference::CdnFunction#API Reference::CdnFunction">
    <brief>User defined function</brief>
  </gobject:class>
  <gobject:class name="CdnFunctionArgument" ref="API Reference::CdnFunctionArgument#API Reference::CdnFunctionArgument">
    <brief>An argument to a custom defined function</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnFunctionError" name="CdnFunctionError" typedef="yes">
    <brief>Function error codes.</brief>
    <enumvalue id="API Reference::CdnFunctionError::CDN_FUNCTION_ERROR_UNKNOWN" name="CDN_FUNCTION_ERROR_UNKNOWN" value="0">
      <brief>unknown</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnFunctionError::CDN_FUNCTION_ERROR_ARGUMENT_NOT_FOUND" name="CDN_FUNCTION_ERROR_ARGUMENT_NOT_FOUND" value="1">
      <brief>argument not found</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnFunctionError::CDN_FUNCTION_NUM_ERRORS" name="CDN_FUNCTION_NUM_ERRORS" value="2">
      <brief>num errors</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnFunctionPolynomial" ref="API Reference::CdnFunctionPolynomial#API Reference::CdnFunctionPolynomial">
    <brief>Custom user defined piecewise polynomial</brief>
  </gobject:class>
  <gobject:class name="CdnFunctionPolynomialPiece" ref="API Reference::CdnFunctionPolynomialPiece#API Reference::CdnFunctionPolynomialPiece">
    <brief>Piecewise polynomial piece</brief>
  </gobject:class>
  <gobject:class name="CdnImport" ref="API Reference::CdnImport#API Reference::CdnImport">
    <brief>Network import object</brief>
  </gobject:class>
  <gobject:class name="CdnImportAlias" ref="API Reference::CdnImportAlias#API Reference::CdnImportAlias">
    <brief>Network import alias object</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnImportError" name="CdnImportError" typedef="yes">
    <brief>Import error types.</brief>
    <enumvalue id="API Reference::CdnImportError::CDN_IMPORT_ERROR_REMOVE" name="CDN_IMPORT_ERROR_REMOVE" value="0">
      <brief>cannot remove imported object</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnInstruction" ref="API Reference::CdnInstruction#API Reference::CdnInstruction">
    <brief>Mathematical instruction base class</brief>
  </gobject:class>
  <gobject:boxed name="CdnInstructionBoxed" ref="API Reference::CdnInstructionBoxed#API Reference::CdnInstructionBoxed">
    <brief>Boxed instruction</brief>
  </gobject:boxed>
  <gobject:class name="CdnInstructionCustomFunction" ref="API Reference::CdnInstructionCustomFunction#API Reference::CdnInstructionCustomFunction">
    <brief>Custom function call instruction</brief>
  </gobject:class>
  <gobject:boxed name="CdnInstructionCustomFunctionBoxed" ref="API Reference::CdnInstructionCustomFunctionBoxed#API Reference::CdnInstructionCustomFunctionBoxed">
    <brief>Boxed custom function instruction</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnInstructionCustomFunctionRefBoxed" ref="API Reference::CdnInstructionCustomFunctionRefBoxed#API Reference::CdnInstructionCustomFunctionRefBoxed">
    <brief>Boxed custom function ref instruction</brief>
  </gobject:boxed>
  <gobject:class name="CdnInstructionCustomOperator" ref="API Reference::CdnInstructionCustomOperator#API Reference::CdnInstructionCustomOperator">
    <brief>Custom operator call instruction</brief>
  </gobject:class>
  <gobject:boxed name="CdnInstructionCustomOperatorBoxed" ref="API Reference::CdnInstructionCustomOperatorBoxed#API Reference::CdnInstructionCustomOperatorBoxed">
    <brief>Boxed custom operator instruction</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnInstructionCustomOperatorRefBoxed" ref="API Reference::CdnInstructionCustomOperatorRefBoxed#API Reference::CdnInstructionCustomOperatorRefBoxed">
    <brief>Boxed custom operator ref instruction</brief>
  </gobject:boxed>
  <gobject:class name="CdnInstructionFunction" ref="API Reference::CdnInstructionFunction#API Reference::CdnInstructionFunction">
    <brief>Function call instruction</brief>
  </gobject:class>
  <gobject:class name="CdnInstructionMatrix" ref="API Reference::CdnInstructionMatrix#API Reference::CdnInstructionMatrix">
    <brief>Matrix instruction</brief>
  </gobject:class>
  <gobject:class name="CdnInstructionNumber" ref="API Reference::CdnInstructionNumber#API Reference::CdnInstructionNumber">
    <brief>Number instruction</brief>
  </gobject:class>
  <gobject:class name="CdnInstructionRand" ref="API Reference::CdnInstructionRand#API Reference::CdnInstructionRand">
    <brief>Random number instruction</brief>
  </gobject:class>
  <gobject:class name="CdnInstructionVariable" ref="API Reference::CdnInstructionVariable#API Reference::CdnInstructionVariable">
    <brief>Variable instruction</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnInstructionVariableBinding" name="CdnInstructionVariableBinding" typedef="yes">
    <brief>Enum used to indicate how the property in a &lt;CdnInstructionVariable</brief>
    <doc>Enum used to indicate how the property in a <ref ref="API Reference::CdnInstructionVariable#API Reference::CdnInstructionVariable">CdnInstructionVariable</ref>
was bound when the instruction was compiled.</doc>
    <enumvalue id="API Reference::CdnInstructionVariableBinding::CDN_INSTRUCTION_VARIABLE_BINDING_NONE" name="CDN_INSTRUCTION_VARIABLE_BINDING_NONE" value="0">
      <brief>none</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnInstructionVariableBinding::CDN_INSTRUCTION_VARIABLE_BINDING_INPUT" name="CDN_INSTRUCTION_VARIABLE_BINDING_INPUT" value="1">
      <brief>input</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnInstructionVariableBinding::CDN_INSTRUCTION_VARIABLE_BINDING_OUTPUT" name="CDN_INSTRUCTION_VARIABLE_BINDING_OUTPUT" value="2">
      <brief>output</brief>
    </enumvalue>
  </enum>
  <gobject:boxed name="CdnInstructionVariableBoxed" ref="API Reference::CdnInstructionVariableBoxed#API Reference::CdnInstructionVariableBoxed">
    <brief>Boxed variable instruction</brief>
  </gobject:boxed>
  <gobject:class name="CdnIntegrator" ref="API Reference::CdnIntegrator#API Reference::CdnIntegrator">
    <brief>Simulation integrator</brief>
  </gobject:class>
  <gobject:class name="CdnIntegratorEuler" ref="API Reference::CdnIntegratorEuler#API Reference::CdnIntegratorEuler">
    <brief>Euler integrator</brief>
  </gobject:class>
  <gobject:class name="CdnIntegratorLeapFrog" ref="API Reference::CdnIntegratorLeapFrog#API Reference::CdnIntegratorLeapFrog">
    <brief>LeapFrog integrator</brief>
  </gobject:class>
  <gobject:class name="CdnIntegratorPredictCorrect" ref="API Reference::CdnIntegratorPredictCorrect#API Reference::CdnIntegratorPredictCorrect">
    <brief>Prediction Correction integrator</brief>
  </gobject:class>
  <gobject:class name="CdnIntegratorRungeKutta" ref="API Reference::CdnIntegratorRungeKutta#API Reference::CdnIntegratorRungeKutta">
    <brief>Runge-Kutta order 4 integrator</brief>
  </gobject:class>
  <gobject:class name="CdnIntegratorState" ref="API Reference::CdnIntegratorState#API Reference::CdnIntegratorState">
    <brief>The integrator state</brief>
  </gobject:class>
  <gobject:class name="CdnIntegrators" ref="API Reference::CdnIntegrators#API Reference::CdnIntegrators">
    <brief>Integrator registry</brief>
  </gobject:class>
  <gobject:interface name="CdnIo" ref="API Reference::CdnIo#API Reference::CdnIo">
    <brief>Io module interface</brief>
  </gobject:interface>
  <gobject:class name="CdnIoMethod" ref="API Reference::CdnIoMethod#API Reference::CdnIoMethod">
    <brief>Dynamic IO module loader</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnIoMode" name="CdnIoMode" typedef="yes">
    <brief>Input/output mode types.</brief>
    <enumvalue id="API Reference::CdnIoMode::CDN_IO_MODE_INPUT" name="CDN_IO_MODE_INPUT" value="1">
      <brief>input</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnIoMode::CDN_IO_MODE_OUTPUT" name="CDN_IO_MODE_OUTPUT" value="2">
      <brief>output</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnIoMode::CDN_IO_MODE_INPUT_OUTPUT" name="CDN_IO_MODE_INPUT_OUTPUT" value="3">
      <brief>input/output</brief>
    </enumvalue>
  </enum>
  <gobject:interface name="CdnLayoutable" ref="API Reference::CdnLayoutable#API Reference::CdnLayoutable">
    <brief>Interface for object layouting</brief>
  </gobject:interface>
  <enum anonymous="yes" id="API Reference::CdnMathFunctionType" name="CdnMathFunctionType" typedef="yes">
    <brief>Function types.</brief>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_NONE" name="CDN_MATH_FUNCTION_TYPE_NONE" value="0">
      <brief>none</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_UNARY_MINUS" name="CDN_MATH_FUNCTION_TYPE_UNARY_MINUS" value="1">
      <brief>unary minus</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_MINUS" name="CDN_MATH_FUNCTION_TYPE_MINUS" value="2">
      <brief>minus</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_PLUS" name="CDN_MATH_FUNCTION_TYPE_PLUS" value="3">
      <brief>plus</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_MULTIPLY" name="CDN_MATH_FUNCTION_TYPE_MULTIPLY" value="4">
      <brief>multiply</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_EMULTIPLY" name="CDN_MATH_FUNCTION_TYPE_EMULTIPLY" value="5">
      <brief>emultiply</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_DIVIDE" name="CDN_MATH_FUNCTION_TYPE_DIVIDE" value="6">
      <brief>divide</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_MODULO" name="CDN_MATH_FUNCTION_TYPE_MODULO" value="7">
      <brief>modulo</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_POWER" name="CDN_MATH_FUNCTION_TYPE_POWER" value="8">
      <brief>power</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_GREATER" name="CDN_MATH_FUNCTION_TYPE_GREATER" value="9">
      <brief>greater</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LESS" name="CDN_MATH_FUNCTION_TYPE_LESS" value="10">
      <brief>less</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_GREATER_OR_EQUAL" name="CDN_MATH_FUNCTION_TYPE_GREATER_OR_EQUAL" value="11">
      <brief>greater or equal</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LESS_OR_EQUAL" name="CDN_MATH_FUNCTION_TYPE_LESS_OR_EQUAL" value="12">
      <brief>less or equal</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_EQUAL" name="CDN_MATH_FUNCTION_TYPE_EQUAL" value="13">
      <brief>equal</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_NEQUAL" name="CDN_MATH_FUNCTION_TYPE_NEQUAL" value="14">
      <brief>not equal</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_OR" name="CDN_MATH_FUNCTION_TYPE_OR" value="15">
      <brief>or</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_AND" name="CDN_MATH_FUNCTION_TYPE_AND" value="16">
      <brief>and</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_NEGATE" name="CDN_MATH_FUNCTION_TYPE_NEGATE" value="17">
      <brief>negate</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TERNARY" name="CDN_MATH_FUNCTION_TYPE_TERNARY" value="18">
      <brief>ternary</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_NUM_OPERATORS" name="CDN_MATH_FUNCTION_TYPE_NUM_OPERATORS" value="19">
      <brief>num operators</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SIN" name="CDN_MATH_FUNCTION_TYPE_SIN" value="20">
      <brief>sine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_COS" name="CDN_MATH_FUNCTION_TYPE_COS" value="21">
      <brief>cosine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TAN" name="CDN_MATH_FUNCTION_TYPE_TAN" value="22">
      <brief>tangent</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ASIN" name="CDN_MATH_FUNCTION_TYPE_ASIN" value="23">
      <brief>arc sine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ACOS" name="CDN_MATH_FUNCTION_TYPE_ACOS" value="24">
      <brief>arc cosine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ATAN" name="CDN_MATH_FUNCTION_TYPE_ATAN" value="25">
      <brief>arc tangent</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ATAN2" name="CDN_MATH_FUNCTION_TYPE_ATAN2" value="26">
      <brief>arc tangent 2</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SQRT" name="CDN_MATH_FUNCTION_TYPE_SQRT" value="27">
      <brief>square root</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_INVSQRT" name="CDN_MATH_FUNCTION_TYPE_INVSQRT" value="28">
      <brief>inverse sequare root</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_MIN" name="CDN_MATH_FUNCTION_TYPE_MIN" value="29">
      <brief>min</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_MAX" name="CDN_MATH_FUNCTION_TYPE_MAX" value="30">
      <brief>max</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_EXP" name="CDN_MATH_FUNCTION_TYPE_EXP" value="31">
      <brief>exponential</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ERF" name="CDN_MATH_FUNCTION_TYPE_ERF" value="32" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_FLOOR" name="CDN_MATH_FUNCTION_TYPE_FLOOR" value="33">
      <brief>floor</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_CEIL" name="CDN_MATH_FUNCTION_TYPE_CEIL" value="34">
      <brief>ceil</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ROUND" name="CDN_MATH_FUNCTION_TYPE_ROUND" value="35">
      <brief>round</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ABS" name="CDN_MATH_FUNCTION_TYPE_ABS" value="36">
      <brief>absolute</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_POW" name="CDN_MATH_FUNCTION_TYPE_POW" value="37">
      <brief>power</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LN" name="CDN_MATH_FUNCTION_TYPE_LN" value="38">
      <brief>natural logarithm</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LOG10" name="CDN_MATH_FUNCTION_TYPE_LOG10" value="39">
      <brief>base 10 logarithm</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_HYPOT" name="CDN_MATH_FUNCTION_TYPE_HYPOT" value="40">
      <brief>euclidean distance</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_EXP2" name="CDN_MATH_FUNCTION_TYPE_EXP2" value="41">
      <brief>base-2 exponential</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SINH" name="CDN_MATH_FUNCTION_TYPE_SINH" value="42">
      <brief>hyperbolic sine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_COSH" name="CDN_MATH_FUNCTION_TYPE_COSH" value="43">
      <brief>hyperbolic consine</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TANH" name="CDN_MATH_FUNCTION_TYPE_TANH" value="44">
      <brief>hyperbolic tangent</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LERP" name="CDN_MATH_FUNCTION_TYPE_LERP" value="45">
      <brief>linear interpolation</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SQSUM" name="CDN_MATH_FUNCTION_TYPE_SQSUM" value="46">
      <brief>squared sum</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SIGN" name="CDN_MATH_FUNCTION_TYPE_SIGN" value="47">
      <brief>sign</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_CSIGN" name="CDN_MATH_FUNCTION_TYPE_CSIGN" value="48">
      <brief>copy sign</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_CLIP" name="CDN_MATH_FUNCTION_TYPE_CLIP" value="49">
      <brief>clip</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_CYCLE" name="CDN_MATH_FUNCTION_TYPE_CYCLE" value="50">
      <brief>cycle</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_INDEX" name="CDN_MATH_FUNCTION_TYPE_INDEX" value="51">
      <brief>index</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LINDEX" name="CDN_MATH_FUNCTION_TYPE_LINDEX" value="52">
      <brief>lindex</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TRANSPOSE" name="CDN_MATH_FUNCTION_TYPE_TRANSPOSE" value="53">
      <brief>transpose</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_INVERSE" name="CDN_MATH_FUNCTION_TYPE_INVERSE" value="54">
      <brief>inverse</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_PSEUDO_INVERSE" name="CDN_MATH_FUNCTION_TYPE_PSEUDO_INVERSE" value="55">
      <brief>pseudo inverse</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LINSOLVE" name="CDN_MATH_FUNCTION_TYPE_LINSOLVE" value="56">
      <brief>linsolve</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_QR" name="CDN_MATH_FUNCTION_TYPE_QR" value="57">
      <brief>qr</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLINSOLVE" name="CDN_MATH_FUNCTION_TYPE_SLINSOLVE" value="58">
      <brief>slinsolve</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLTDL" name="CDN_MATH_FUNCTION_TYPE_SLTDL" value="59" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLTDL_DINV" name="CDN_MATH_FUNCTION_TYPE_SLTDL_DINV" value="60" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLTDL_DINV_LINVT" name="CDN_MATH_FUNCTION_TYPE_SLTDL_DINV_LINVT" value="61" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLTDL_LINVT" name="CDN_MATH_FUNCTION_TYPE_SLTDL_LINVT" value="62" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SLTDL_LINV" name="CDN_MATH_FUNCTION_TYPE_SLTDL_LINV" value="63" />
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SUM" name="CDN_MATH_FUNCTION_TYPE_SUM" value="64">
      <brief>sum</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_PRODUCT" name="CDN_MATH_FUNCTION_TYPE_PRODUCT" value="65">
      <brief>product</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_LENGTH" name="CDN_MATH_FUNCTION_TYPE_LENGTH" value="66">
      <brief>length</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_SIZE" name="CDN_MATH_FUNCTION_TYPE_SIZE" value="67">
      <brief>size</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_VCAT" name="CDN_MATH_FUNCTION_TYPE_VCAT" value="68">
      <brief>vcat</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_ZEROS" name="CDN_MATH_FUNCTION_TYPE_ZEROS" value="69">
      <brief>zeros</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_EYE" name="CDN_MATH_FUNCTION_TYPE_EYE" value="70">
      <brief>eye</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_DIAG" name="CDN_MATH_FUNCTION_TYPE_DIAG" value="71">
      <brief>diag</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TRIL" name="CDN_MATH_FUNCTION_TYPE_TRIL" value="72">
      <brief>tril</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_TRIU" name="CDN_MATH_FUNCTION_TYPE_TRIU" value="73">
      <brief>triu</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_CSUM" name="CDN_MATH_FUNCTION_TYPE_CSUM" value="74">
      <brief>csum</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_RSUM" name="CDN_MATH_FUNCTION_TYPE_RSUM" value="75">
      <brief>rsum</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnMathFunctionType::CDN_MATH_FUNCTION_TYPE_NUM" name="CDN_MATH_FUNCTION_TYPE_NUM" value="76">
      <brief>number of function types</brief>
    </enumvalue>
  </enum>
  <gobject:boxed name="CdnMatrix" ref="API Reference::CdnMatrix#API Reference::CdnMatrix">
    <brief>2D matrix value</brief>
  </gobject:boxed>
  <gobject:class name="CdnMiniObject" ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject">
    <brief>A minimum object class</brief>
  </gobject:class>
  <gobject:interface name="CdnModifiable" ref="API Reference::CdnModifiable#API Reference::CdnModifiable">
    <brief>Interface for keeping track of the modified state of an object</brief>
  </gobject:interface>
  <gobject:class name="CdnMonitor" ref="API Reference::CdnMonitor#API Reference::CdnMonitor">
    <brief>Property value monitor</brief>
  </gobject:class>
  <gobject:class name="CdnNetwork" ref="API Reference::CdnNetwork#API Reference::CdnNetwork">
    <brief>The main codyn network object</brief>
  </gobject:class>
  <gobject:class name="CdnNetworkDeserializer" ref="API Reference::CdnNetworkDeserializer#API Reference::CdnNetworkDeserializer">
    <brief>XML to Network deserializer</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnNetworkError" name="CdnNetworkError" typedef="yes">
    <brief>Network error codes.</brief>
    <enumvalue id="API Reference::CdnNetworkError::CDN_NETWORK_ERROR_UNOWNED_TEMPLATE" name="CDN_NETWORK_ERROR_UNOWNED_TEMPLATE" value="0">
      <brief>unowned template</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkError::CDN_NETWORK_ERROR_NUM" name="CDN_NETWORK_ERROR_NUM" value="1">
      <brief>num</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnNetworkFormat" name="CdnNetworkFormat" typedef="yes">
    <brief>The loaded network format.</brief>
    <enumvalue id="API Reference::CdnNetworkFormat::CDN_NETWORK_FORMAT_UNKNOWN" name="CDN_NETWORK_FORMAT_UNKNOWN" value="0">
      <brief>unknown</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkFormat::CDN_NETWORK_FORMAT_CDN" name="CDN_NETWORK_FORMAT_CDN" value="1">
      <brief>codyn modeling language</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkFormat::CDN_NETWORK_FORMAT_XML" name="CDN_NETWORK_FORMAT_XML" value="2">
      <brief>xml</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnNetworkLoadError" name="CdnNetworkLoadError" typedef="yes">
    <brief>Network load error types.</brief>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_NONE" name="CDN_NETWORK_LOAD_ERROR_NONE" value="0" />
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_SYNTAX" name="CDN_NETWORK_LOAD_ERROR_SYNTAX" value="1">
      <brief>syntax error</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_VARIABLE" name="CDN_NETWORK_LOAD_ERROR_VARIABLE" value="2">
      <brief>error occurred in loading a variable</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_OBJECT" name="CDN_NETWORK_LOAD_ERROR_OBJECT" value="3">
      <brief>error occurred in loading an object</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_EDGE" name="CDN_NETWORK_LOAD_ERROR_EDGE" value="4">
      <brief>error occurred in loading a edge</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_FUNCTION" name="CDN_NETWORK_LOAD_ERROR_FUNCTION" value="5">
      <brief>error occurred in loading a function</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_IMPORT" name="CDN_NETWORK_LOAD_ERROR_IMPORT" value="6">
      <brief>error occurred in an import</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_IO" name="CDN_NETWORK_LOAD_ERROR_IO" value="7">
      <brief>error occurred in io</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_INTERFACE" name="CDN_NETWORK_LOAD_ERROR_INTERFACE" value="8">
      <brief>error occurred in an interface</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_OPERATOR" name="CDN_NETWORK_LOAD_ERROR_OPERATOR" value="9" />
    <enumvalue id="API Reference::CdnNetworkLoadError::CDN_NETWORK_LOAD_ERROR_LINK_LIBRARY" name="CDN_NETWORK_LOAD_ERROR_LINK_LIBRARY" value="10" />
  </enum>
  <gobject:class name="CdnNetworkSerializer" ref="API Reference::CdnNetworkSerializer#API Reference::CdnNetworkSerializer">
    <brief>Network to XML serializer</brief>
  </gobject:class>
  <gobject:class name="CdnNode" ref="API Reference::CdnNode#API Reference::CdnNode">
    <brief>Base node class</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnNodeError" name="CdnNodeError" typedef="yes">
    <brief>Node error codes.</brief>
    <enumvalue id="API Reference::CdnNodeError::CDN_NODE_ERROR_CHILD_ALREADY_EXISTS" name="CDN_NODE_ERROR_CHILD_ALREADY_EXISTS" value="0">
      <brief>child already exists</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNodeError::CDN_NODE_ERROR_CHILD_DOES_NOT_EXIST" name="CDN_NODE_ERROR_CHILD_DOES_NOT_EXIST" value="1">
      <brief>child does not exist</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNodeError::CDN_NODE_ERROR_CHILD_IN_USE" name="CDN_NODE_ERROR_CHILD_IN_USE" value="2">
      <brief>child in use</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnNodeError::CDN_NODE_ERROR_NUM" name="CDN_NODE_ERROR_NUM" value="3">
      <brief>num</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnObject" ref="API Reference::CdnObject#API Reference::CdnObject">
    <brief>Basis for all cdn objects</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnObjectError" name="CdnObjectError" typedef="yes">
    <brief>Enum used to indicate an error when removing a variable</brief>
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_VARIABLE_UNKNOWN" name="CDN_OBJECT_ERROR_VARIABLE_UNKNOWN" value="0">
      <brief>unknown</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_VARIABLE_NOT_FOUND" name="CDN_OBJECT_ERROR_VARIABLE_NOT_FOUND" value="1">
      <brief>variable not found</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_VARIABLE_IN_USE" name="CDN_OBJECT_ERROR_VARIABLE_IN_USE" value="2">
      <brief>variable in use</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_VARIABLE_FROM_TEMPLATE" name="CDN_OBJECT_ERROR_VARIABLE_FROM_TEMPLATE" value="3" />
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_INVALID_VARIABLE_NAME" name="CDN_OBJECT_ERROR_INVALID_VARIABLE_NAME" value="4" />
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_TEMPLATE_ALREADY_APPLIED" name="CDN_OBJECT_ERROR_TEMPLATE_ALREADY_APPLIED" value="5" />
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_ERROR_TEMPLATE_NOT_FOUND" name="CDN_OBJECT_ERROR_TEMPLATE_NOT_FOUND" value="6" />
    <enumvalue id="API Reference::CdnObjectError::CDN_OBJECT_NUM_ERRORS" name="CDN_OBJECT_NUM_ERRORS" value="7">
      <brief>num errors</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnOperator" ref="API Reference::CdnOperator#API Reference::CdnOperator">
    <brief>Custom operator base class</brief>
  </gobject:class>
  <gobject:class name="CdnOperatorDelayed" ref="API Reference::CdnOperatorDelayed#API Reference::CdnOperatorDelayed">
    <brief>Math operator for delayed evaluation of an expression</brief>
  </gobject:class>
  <gobject:class name="CdnOperatorDiff" ref="API Reference::CdnOperatorDiff#API Reference::CdnOperatorDiff">
    <brief>Math operator for diff evaluation of an expression</brief>
  </gobject:class>
  <gobject:class name="CdnOperatorDt" ref="API Reference::CdnOperatorDt#API Reference::CdnOperatorDt">
    <brief>Math operator for dt evaluation of an expression</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnOperatorError" name="CdnOperatorError" typedef="yes">
    <brief>CDN_OPERATOR_ERROR_UNSUPPORTED: unsupporte</brief>
    <doc>CDN_OPERATOR_ERROR_UNSUPPORTED: unsupported
CDN_OPERATOR_ERROR_INVALID: invalid
Operator error codes.</doc>
    <enumvalue id="API Reference::CdnOperatorError::CDN_OPERATOR_ERROR_UNSUPPORTED" name="CDN_OPERATOR_ERROR_UNSUPPORTED" value="0" />
    <enumvalue id="API Reference::CdnOperatorError::CDN_OPERATOR_ERROR_INVALID" name="CDN_OPERATOR_ERROR_INVALID" value="1" />
  </enum>
  <gobject:class name="CdnOperatorLinsolve" ref="API Reference::CdnOperatorLinsolve#API Reference::CdnOperatorLinsolve">
    <brief>Math operator for linsolve evaluation of an expression</brief>
  </gobject:class>
  <gobject:class name="CdnOperatorPDiff" ref="API Reference::CdnOperatorPDiff#API Reference::CdnOperatorPDiff">
    <brief>Math operator for diff evaluation of an expression</brief>
  </gobject:class>
  <gobject:class name="CdnOperatorSimplify" ref="API Reference::CdnOperatorSimplify#API Reference::CdnOperatorSimplify">
    <brief>Math operator for simplify evaluation of an expression</brief>
  </gobject:class>
  <gobject:class name="CdnParamSpecMiniObject" ref="API Reference::CdnParamSpecMiniObject#API Reference::CdnParamSpecMiniObject">
    <brief>A mini object param spec</brief>
  </gobject:class>
  <gobject:class name="CdnParserContext" ref="API Reference::CdnParserContext#API Reference::CdnParserContext">
    <brief>Modeling language parsing context</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnParserContextDeleteType" name="CdnParserContextDeleteType" typedef="yes">
    <brief>Delete types.</brief>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_OBJECT" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_OBJECT" value="0">
      <brief>object</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_NODE" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_NODE" value="1">
      <brief>node</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_EDGE" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_EDGE" value="2">
      <brief>edge</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_VARIABLE" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_VARIABLE" value="3">
      <brief>variable</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_ACTION" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_ACTION" value="4">
      <brief>action</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnParserContextDeleteType::CDN_PARSER_CONTEXT_SELECTOR_TYPE_FUNCTION" name="CDN_PARSER_CONTEXT_SELECTOR_TYPE_FUNCTION" value="5">
      <brief>function</brief>
    </enumvalue>
  </enum>
  <gobject:interface name="CdnPhaseable" ref="API Reference::CdnPhaseable#API Reference::CdnPhaseable">
    <brief>Interface for state dependent actions</brief>
  </gobject:interface>
  <gobject:boxed name="CdnSelection" ref="API Reference::CdnSelection#API Reference::CdnSelection">
    <brief>Selection object</brief>
  </gobject:boxed>
  <gobject:class name="CdnSelector" ref="API Reference::CdnSelector#API Reference::CdnSelector">
    <brief>Selector class</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnSelectorPartType" name="CdnSelectorPartType" typedef="yes">
    <brief>Part type.</brief>
    <enumvalue id="API Reference::CdnSelectorPartType::CDN_SELECTOR_PART_TYPE_IDENTIFIER" name="CDN_SELECTOR_PART_TYPE_IDENTIFIER" value="0">
      <brief>identifier</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPartType::CDN_SELECTOR_PART_TYPE_REGEX" name="CDN_SELECTOR_PART_TYPE_REGEX" value="1">
      <brief>regular expression</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPartType::CDN_SELECTOR_PART_TYPE_PSEUDO" name="CDN_SELECTOR_PART_TYPE_PSEUDO" value="2">
      <brief>pseudo selector</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnSelectorPseudoType" name="CdnSelectorPseudoType" typedef="yes">
    <brief>Pseudo selector type.</brief>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_ROOT" name="CDN_SELECTOR_PSEUDO_TYPE_ROOT" value="0">
      <brief>root</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES_ROOT" name="CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES_ROOT" value="1">
      <brief>templates root</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_CHILDREN" name="CDN_SELECTOR_PSEUDO_TYPE_CHILDREN" value="2">
      <brief>children</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_PARENT" name="CDN_SELECTOR_PSEUDO_TYPE_PARENT" value="3">
      <brief>parent</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_FIRST" name="CDN_SELECTOR_PSEUDO_TYPE_FIRST" value="4">
      <brief>first</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_LAST" name="CDN_SELECTOR_PSEUDO_TYPE_LAST" value="5">
      <brief>last</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_SUBSET" name="CDN_SELECTOR_PSEUDO_TYPE_SUBSET" value="6">
      <brief>subset</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_EDGES" name="CDN_SELECTOR_PSEUDO_TYPE_EDGES" value="7">
      <brief>edges</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_NODES" name="CDN_SELECTOR_PSEUDO_TYPE_NODES" value="8">
      <brief>nodes</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_IMPORTS" name="CDN_SELECTOR_PSEUDO_TYPE_IMPORTS" value="9">
      <brief>imports</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_VARIABLES" name="CDN_SELECTOR_PSEUDO_TYPE_VARIABLES" value="10">
      <brief>variables</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_ACTIONS" name="CDN_SELECTOR_PSEUDO_TYPE_ACTIONS" value="11">
      <brief>actions</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_FUNCTIONS" name="CDN_SELECTOR_PSEUDO_TYPE_FUNCTIONS" value="12">
      <brief>functions</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_OBJECTS" name="CDN_SELECTOR_PSEUDO_TYPE_OBJECTS" value="13">
      <brief>objects</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_SIBLINGS" name="CDN_SELECTOR_PSEUDO_TYPE_SIBLINGS" value="14">
      <brief>siblings</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES" name="CDN_SELECTOR_PSEUDO_TYPE_TEMPLATES" value="15">
      <brief>templates</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_COUNT" name="CDN_SELECTOR_PSEUDO_TYPE_COUNT" value="16">
      <brief>count</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_INPUT" name="CDN_SELECTOR_PSEUDO_TYPE_INPUT" value="17">
      <brief>input</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_OUTPUT" name="CDN_SELECTOR_PSEUDO_TYPE_OUTPUT" value="18">
      <brief>output</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_INPUTS" name="CDN_SELECTOR_PSEUDO_TYPE_INPUTS" value="19">
      <brief>inputs</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_OUTPUTS" name="CDN_SELECTOR_PSEUDO_TYPE_OUTPUTS" value="20">
      <brief>outputs</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_INPUT_NAME" name="CDN_SELECTOR_PSEUDO_TYPE_INPUT_NAME" value="21">
      <brief>input name</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_OUTPUT_NAME" name="CDN_SELECTOR_PSEUDO_TYPE_OUTPUT_NAME" value="22">
      <brief>output name</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_SELF" name="CDN_SELECTOR_PSEUDO_TYPE_SELF" value="23">
      <brief>self</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_DEBUG" name="CDN_SELECTOR_PSEUDO_TYPE_DEBUG" value="24">
      <brief>debug</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_NAME" name="CDN_SELECTOR_PSEUDO_TYPE_NAME" value="25">
      <brief>name</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_UNIQUE" name="CDN_SELECTOR_PSEUDO_TYPE_UNIQUE" value="26">
      <brief>unique</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_IF" name="CDN_SELECTOR_PSEUDO_TYPE_IF" value="27">
      <brief>if</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_NOT" name="CDN_SELECTOR_PSEUDO_TYPE_NOT" value="28">
      <brief>not</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_IFSTR" name="CDN_SELECTOR_PSEUDO_TYPE_IFSTR" value="29">
      <brief>ifstr</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_NOTSTR" name="CDN_SELECTOR_PSEUDO_TYPE_NOTSTR" value="30">
      <brief>notstr</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_FROM_SET" name="CDN_SELECTOR_PSEUDO_TYPE_FROM_SET" value="31">
      <brief>from set</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_TYPE" name="CDN_SELECTOR_PSEUDO_TYPE_TYPE" value="32">
      <brief>type</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_HAS_FLAG" name="CDN_SELECTOR_PSEUDO_TYPE_HAS_FLAG" value="33">
      <brief>has flag</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_HAS_TEMPLATE" name="CDN_SELECTOR_PSEUDO_TYPE_HAS_TEMPLATE" value="34">
      <brief>has template</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_REVERSE" name="CDN_SELECTOR_PSEUDO_TYPE_REVERSE" value="35">
      <brief>reverse</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_RECURSE" name="CDN_SELECTOR_PSEUDO_TYPE_RECURSE" value="36">
      <brief>recurse</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_APPEND_CONTEXT" name="CDN_SELECTOR_PSEUDO_TYPE_APPEND_CONTEXT" value="37">
      <brief>append context</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_APPLIED_TEMPLATES" name="CDN_SELECTOR_PSEUDO_TYPE_APPLIED_TEMPLATES" value="38">
      <brief>applied templates</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_REDUCE" name="CDN_SELECTOR_PSEUDO_TYPE_REDUCE" value="39">
      <brief>reduce</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_SORT" name="CDN_SELECTOR_PSEUDO_TYPE_SORT" value="40">
      <brief>sort</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_TYPE_XOR" name="CDN_SELECTOR_PSEUDO_TYPE_XOR" value="41">
      <brief>xor</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorPseudoType::CDN_SELECTOR_PSEUDO_NUM" name="CDN_SELECTOR_PSEUDO_NUM" value="42">
      <brief>num</brief>
    </enumvalue>
  </enum>
  <enum anonymous="yes" id="API Reference::CdnSelectorType" name="CdnSelectorType" typedef="yes">
    <brief>Selector type.</brief>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_NONE" name="CDN_SELECTOR_TYPE_NONE" value="0">
      <brief>none</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_ANY" name="CDN_SELECTOR_TYPE_ANY" value="1">
      <brief>any</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_STATE" name="CDN_SELECTOR_TYPE_STATE" value="2">
      <brief>state</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_EDGE" name="CDN_SELECTOR_TYPE_EDGE" value="4">
      <brief>edge</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_NODE" name="CDN_SELECTOR_TYPE_NODE" value="8">
      <brief>node</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_VARIABLE" name="CDN_SELECTOR_TYPE_VARIABLE" value="16">
      <brief>variable</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_ACTION" name="CDN_SELECTOR_TYPE_ACTION" value="32">
      <brief>action</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_FUNCTION" name="CDN_SELECTOR_TYPE_FUNCTION" value="64">
      <brief>function</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_TEMPLATE" name="CDN_SELECTOR_TYPE_TEMPLATE" value="128">
      <brief>template</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnSelectorType::CDN_SELECTOR_TYPE_OBJECT" name="CDN_SELECTOR_TYPE_OBJECT" value="206">
      <brief>all object types</brief>
    </enumvalue>
  </enum>
  <gobject:boxed name="CdnStack" ref="API Reference::CdnStack#API Reference::CdnStack">
    <brief>Simple stack</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnStackArg" ref="API Reference::CdnStackArg#API Reference::CdnStackArg">
    <brief>A stack argument</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnStackArgs" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs">
    <brief>List of stack argument</brief>
  </gobject:boxed>
  <gobject:boxed name="CdnStackManipulation" ref="API Reference::CdnStackManipulation#API Reference::CdnStackManipulation">
    <brief>Stack manipulation informatio</brief>
  </gobject:boxed>
  <gobject:interface name="CdnStatement" ref="API Reference::CdnStatement#API Reference::CdnStatement">
    <brief>Interface for keeping track statements.</brief>
  </gobject:interface>
  <gobject:interface name="CdnUsable" ref="API Reference::CdnUsable#API Reference::CdnUsable">
    <brief>Interface for counting the uses of an object</brief>
  </gobject:interface>
  <gobject:class name="CdnVariable" ref="API Reference::CdnVariable#API Reference::CdnVariable">
    <brief>Variable</brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnVariableFlags" name="CdnVariableFlags" typedef="yes">
    <brief>Property flags.</brief>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_NONE" name="CDN_VARIABLE_FLAG_NONE" value="0">
      <brief>none</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_INTEGRATED" name="CDN_VARIABLE_FLAG_INTEGRATED" value="1">
      <brief>integrated</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_IN" name="CDN_VARIABLE_FLAG_IN" value="2">
      <brief>in</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_OUT" name="CDN_VARIABLE_FLAG_OUT" value="4">
      <brief>out</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_ONCE" name="CDN_VARIABLE_FLAG_ONCE" value="8">
      <brief>once</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_DISCRETE" name="CDN_VARIABLE_FLAG_DISCRETE" value="16" />
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_FUNCTION_ARGUMENT" name="CDN_VARIABLE_FLAG_FUNCTION_ARGUMENT" value="32">
      <brief>function-argument</brief>
    </enumvalue>
    <enumvalue id="API Reference::CdnVariableFlags::CDN_VARIABLE_FLAG_INOUT" name="CDN_VARIABLE_FLAG_INOUT" value="6">
      <brief>convenience for CDN_VARIABLE_FLAG_IN | CDN_VARIABLE_FLAG_OUT</brief>
    </enumvalue>
  </enum>
  <gobject:class name="CdnVariableInterface" ref="API Reference::CdnVariableInterface#API Reference::CdnVariableInterface">
    <brief>Variable interface for <ref ref="API Reference::CdnNode#API Reference::CdnNode">CdnNode</ref>
    </brief>
  </gobject:class>
  <enum anonymous="yes" id="API Reference::CdnVariableInterfaceError" name="CdnVariableInterfaceError" typedef="yes">
    <brief>Enum used to indicate an error when interacting with the variable interface</brief>
    <enumvalue id="API Reference::CdnVariableInterfaceError::CDN_VARIABLE_INTERFACE_ERROR_EXISTS" name="CDN_VARIABLE_INTERFACE_ERROR_EXISTS" value="0" />
    <enumvalue id="API Reference::CdnVariableInterfaceError::CDN_VARIABLE_INTERFACE_ERROR_NOT_FOUND" name="CDN_VARIABLE_INTERFACE_ERROR_NOT_FOUND" value="1" />
    <enumvalue id="API Reference::CdnVariableInterfaceError::CDN_VARIABLE_INTERFACE_ERROR_NUM_ERRORS" name="CDN_VARIABLE_INTERFACE_ERROR_NUM_ERRORS" value="2" />
  </enum>
  <function id="cdn_compile_error_code_string" name="cdn_compile_error_code_string">
    <brief>Get the string describing an error with error code &amp;lt;error&amp;gt;</brief>
    <return>
      <doc>the error string message</doc>
      <type builtin="yes" name="gchar" qualifier=" const *" />
    </return>
    <argument id="cdn_compile_error_code_string::code" name="code">
      <doc>the error code</doc>
      <type builtin="yes" name="gint" />
    </argument>
  </function>
  <function id="cdn_compose_dot" name="cdn_compose_dot">
    <brief>Create a new name which represents the <ref ref="API Reference#cdn_compose_dot::order">cdn_compose_dot::order</ref> th derivativ</brief>
    <doc>Create a new name which represents the <ref ref="API Reference#cdn_compose_dot::order">cdn_compose_dot::order</ref> th derivative
of <ref ref="API Reference#cdn_compose_dot::name">cdn_compose_dot::name</ref>. If <ref ref="API Reference#cdn_compose_dot::order">cdn_compose_dot::order</ref> is smaller or equal to 2, then a utf-8 dot
or double dot compose character will be used. For orders larger
than 2 primes will be appended to the given name.

</doc>
    <return>
      <doc>the dot composed name</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_compose_dot::name" name="name">
      <doc>the name to compose a dot on</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
    <argument id="cdn_compose_dot::order" name="order">
      <doc>the dot order</doc>
      <type builtin="yes" name="gint" />
    </argument>
  </function>
  <function id="cdn_decompose_dot" name="cdn_decompose_dot">
    <brief>Decompose a name into its actual name and the derivative order</brief>
    <doc>Decompose a name into its actual name and the derivative order. This can
parse composed utf-8 dot and double dot characters on the first character,
as well as primes at the end of <ref ref="API Reference#cdn_decompose_dot::name">cdn_decompose_dot::name</ref>. The derivative order is returned
in <ref ref="API Reference#cdn_decompose_dot::order">cdn_decompose_dot::order</ref>.

</doc>
    <return>
      <doc>the decomposed name</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_decompose_dot::name" name="name">
      <doc>the name to decompose</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
    <argument id="cdn_decompose_dot::order" name="order">
      <doc>result value for decomposed order</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_embedded_string_error_quark" name="cdn_embedded_string_error_quark">
    <brief>Get the error quark for embedded string errors</brief>
    <return>
      <doc>the &amp;lt;GQuark&amp;gt; representing embedded string errors</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_expansions_annotate_indices" name="cdn_expansions_annotate_indices">
    <brief>Annotate the indices of the expansion items starting at th</brief>
    <doc>Annotate the indices of the expansion items starting at the
provided start. Items with the same value will be assigned the
same index.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_expansions_annotate_indices::expansions" name="expansions">
      <doc>expansions</doc>
      <type name="GSList" qualifier="*" />
    </argument>
    <argument id="cdn_expansions_annotate_indices::start" name="start">
      <doc>the start</doc>
      <type builtin="yes" name="gint" />
    </argument>
  </function>
  <function id="cdn_expression_tree_iter_derive_error_quark" name="cdn_expression_tree_iter_derive_error_quark">
    <brief>Get the derive error quark.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the derive error type.</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_function_error_quark" name="cdn_function_error_quark">
    <brief>Get the function error type quark.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the function error type.</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_import_error_quark" name="cdn_import_error_quark">
    <brief>The import error type quark.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the import error type.</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_init" name="cdn_init">
    <brief>Global codyn library initialization</brief>
    <doc>Global codyn library initialization. This initializes the gobject type
system, debugging and input/output modules. Note that you normally do not need
to call this as it codyn initializes automatically on first use. This function
can be called multiple times and will only initialize once.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
  </function>
  <function id="cdn_math_constant_lookup" name="cdn_math_constant_lookup">
    <brief>Get the value of a constant</brief>
    <doc>Get the value of a constant. Valid constants are: pi, PI, e, E, NAN, nan,
NaN, Inf, INF, inf.

</doc>
    <return>
      <doc>the value of a constant</doc>
      <type builtin="yes" name="gdouble" />
    </return>
    <argument id="cdn_math_constant_lookup::name" name="name">
      <doc>The name of the constant</doc>
      <type builtin="yes" name="gchar" qualifier=" const *" />
    </argument>
    <argument id="cdn_math_constant_lookup::found" name="found">
      <doc>Return value whether or not the constant could be found</doc>
      <type builtin="yes" name="gboolean" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_math_function_execute" name="cdn_math_function_execute">
    <brief>Execute a math function on the stack.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_math_function_execute::type" name="type">
      <doc>A <ref ref="API Reference#API Reference::CdnMathFunctionType">CdnMathFunctionType</ref></doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </argument>
    <argument id="cdn_math_function_execute::argdim" name="argdim">
      <doc>*documentation missing...*</doc>
      <type name="CdnStackArgs" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
    <argument id="cdn_math_function_execute::stack" name="stack">
      <doc>A <ref ref="API Reference::CdnStack#API Reference::CdnStack">CdnStack</ref></doc>
      <type name="CdnStack" qualifier="*" ref="API Reference::CdnStack#API Reference::CdnStack" />
    </argument>
  </function>
  <function id="cdn_math_function_get_stack_manipulation" name="cdn_math_function_get_stack_manipulation">
    <brief>Calculate the required stack manipulation of a mathematical function o</brief>
    <doc>Calculate the required stack manipulation of a mathematical function or
operator given <ref ref="API Reference#cdn_math_function_get_stack_manipulation::inargs">cdn_math_function_get_stack_manipulation::inargs</ref>. If possible, <ref ref="API Reference#cdn_math_function_get_stack_manipulation::outarg">cdn_math_function_get_stack_manipulation::outarg</ref> and <ref ref="API Reference#cdn_math_function_get_stack_manipulation::extra_space">cdn_math_function_get_stack_manipulation::extra_space</ref> will be set
to the resulting output dimensionality of the operation and any extra space
which is required on the stack for this operation.

</doc>
    <return>
      <doc>`TRUE` if the stack manipulation could be determined correctly, `FALSE` otherwise.</doc>
      <type builtin="yes" name="gboolean" />
    </return>
    <argument id="cdn_math_function_get_stack_manipulation::type" name="type">
      <doc>the math function type</doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </argument>
    <argument id="cdn_math_function_get_stack_manipulation::inargs" name="inargs">
      <doc>the input arguments</doc>
      <type name="CdnStackArgs" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
    <argument id="cdn_math_function_get_stack_manipulation::outarg" name="outarg">
      <doc>the output arguments</doc>
      <type name="CdnStackArg" out="yes" qualifier="*" ref="API Reference::CdnStackArg#API Reference::CdnStackArg" />
    </argument>
    <argument id="cdn_math_function_get_stack_manipulation::extra_space" name="extra_space">
      <doc>extra space required for the operation</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_math_function_get_stack_manipulation::error" name="error">
      <doc>a &amp;lt;GError&amp;gt;.</doc>
      <type allow-none="yes" name="GError " qualifier="**" />
    </argument>
  </function>
  <function id="cdn_math_function_is_commutative" name="cdn_math_function_is_commutative">
    <brief>Get whether an function is commutative.</brief>
    <return>
      <doc>`TRUE` if the function is commutative, `FALSE` otherwise</doc>
      <type builtin="yes" name="gboolean" />
    </return>
    <argument id="cdn_math_function_is_commutative::type" name="type">
      <doc>A &amp;lt;CdnMathOperatorType&amp;gt;</doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </argument>
    <argument id="cdn_math_function_is_commutative::argdim" name="argdim">
      <doc>*documentation missing...*</doc>
      <type name="CdnStackArgs" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
  </function>
  <function id="cdn_math_function_is_variable" name="cdn_math_function_is_variable">
    <brief>Get whether the math function accepts a variable number of arguments.</brief>
    <return>
      <doc>`TRUE` if the function accepts a variable number of arguments, `FALSE` otherwise</doc>
      <type builtin="yes" name="gboolean" />
    </return>
    <argument id="cdn_math_function_is_variable::type" name="type">
      <doc>A <ref ref="API Reference#API Reference::CdnMathFunctionType">CdnMathFunctionType</ref></doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </argument>
  </function>
  <function id="cdn_math_function_lookup" name="cdn_math_function_lookup">
    <brief>Lookup a math function given the name <ref ref="API Reference#cdn_math_function_lookup::name">cdn_math_function_lookup::name</ref> and number of arguments.</brief>
    <return>
      <doc>A <ref ref="API Reference#API Reference::CdnMathFunctionType">CdnMathFunctionType</ref></doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </return>
    <argument id="cdn_math_function_lookup::name" name="name">
      <doc>The function name</doc>
      <type builtin="yes" name="gchar" qualifier=" const *" />
    </argument>
    <argument id="cdn_math_function_lookup::arguments" name="arguments">
      <doc>The number of arguments</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_math_function_lookup_by_id" name="cdn_math_function_lookup_by_id">
    <brief>Lookup the name of a function by its id.</brief>
    <return>
      <doc>the name of the function, or `NULL` if the function could not be found</doc>
      <type builtin="yes" name="gchar" qualifier=" const *" />
    </return>
    <argument id="cdn_math_function_lookup_by_id::type" name="type">
      <doc>A <ref ref="API Reference#API Reference::CdnMathFunctionType">CdnMathFunctionType</ref></doc>
      <type name="CdnMathFunctionType" ref="API Reference#API Reference::CdnMathFunctionType" />
    </argument>
    <argument id="cdn_math_function_lookup_by_id::arguments" name="arguments">
      <doc>return value for the number of arguments</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_math_register_builtin_function" name="cdn_math_register_builtin_function">
    <brief>Register a new builtin math function</brief>
    <doc>Register a new builtin math function. After registration, any expression
can use the new builtin function.

</doc>
    <return>
      <doc>the id of the newly registered function</doc>
      <type builtin="yes" name="guint" />
    </return>
    <argument id="cdn_math_register_builtin_function::name" name="name">
      <doc>the name of the builtin function</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
    <argument id="cdn_math_register_builtin_function::numargs" name="numargs">
      <doc>the number of arguments of the builtin function</doc>
      <type builtin="yes" name="gint" />
    </argument>
    <argument id="cdn_math_register_builtin_function::evaluate" name="evaluate">
      <doc>a &amp;lt;CdnMathFunctionEvaluateFunc&amp;gt;</doc>
      <type name="CdnMathFunctionEvaluateFunc" />
    </argument>
    <argument id="cdn_math_register_builtin_function::smanipcb" name="smanipcb">
      <doc>a &amp;lt;CdnMathStackManipulationFunc&amp;gt;</doc>
      <type name="CdnMathStackManipulationFunc" />
    </argument>
    <argument id="cdn_math_register_builtin_function::userdata" name="userdata">
      <doc>userdata provided to the evaluate func</doc>
      <type builtin="yes" name="gpointer" />
    </argument>
    <argument id="cdn_math_register_builtin_function::destroy_notify" name="destroy_notify">
      <doc>a &amp;lt;GDestroyNotify&amp;gt;</doc>
      <type name="GDestroyNotify" />
    </argument>
  </function>
  <function id="cdn_network_error_quark" name="cdn_network_error_quark">
    <brief>Get the error quark for the network error type.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the network error type</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_network_format_from_file" name="cdn_network_format_from_file">
    <brief>Determine the type of CDN format from a file</brief>
    <doc>Determine the type of CDN format from a file. If the type of the file
could not be determined, <ref ref="API Reference#API Reference::CdnNetworkFormat::CDN_NETWORK_FORMAT_UNKNOWN">CDN_NETWORK_FORMAT_UNKNOWN</ref> is returned. This
function only uses the mime type of a file. Use
<ref ref="API Reference#cdn_network_format_from_stream">cdn_network_format_from_stream</ref> to determine the format from the contents.

</doc>
    <return>
      <doc>A <ref ref="API Reference#API Reference::CdnNetworkFormat">CdnNetworkFormat</ref></doc>
      <type name="CdnNetworkFormat" ref="API Reference#API Reference::CdnNetworkFormat" />
    </return>
    <argument id="cdn_network_format_from_file::file" name="file">
      <doc>A &amp;lt;GFile&amp;gt;</doc>
      <type name="GFile" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_network_format_from_stream" name="cdn_network_format_from_stream">
    <brief>Determine the type of CDN format from a stream</brief>
    <doc>Determine the type of CDN format from a stream. This only works if either
the stream is seekable (see &amp;lt;GSeekable&amp;gt;), or if the stream is a
&amp;lt;GBufferedInputStream&amp;gt;. If needed, you can wrap your stream in a
&amp;lt;GBufferedInputStream&amp;gt; before passing it.

</doc>
    <return>
      <doc>A <ref ref="API Reference#API Reference::CdnNetworkFormat">CdnNetworkFormat</ref></doc>
      <type name="CdnNetworkFormat" ref="API Reference#API Reference::CdnNetworkFormat" />
    </return>
    <argument id="cdn_network_format_from_stream::stream" name="stream">
      <doc>A &amp;lt;GInputStream&amp;gt;</doc>
      <type name="GInputStream" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_network_load_error_quark" name="cdn_network_load_error_quark">
    <brief>Get the error quark for the network load error type.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the network load error type</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_node_error_quark" name="cdn_node_error_quark">
    <brief>Get the error quark for the node error type.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the node error type</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_object_error_quark" name="cdn_object_error_quark">
    <brief>Get the error quark for the object error type.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the object error type</doc>
      <type name="GQuark" />
    </return>
  </function>
  <function id="cdn_operators_find" name="cdn_operators_find">
    <brief>Find a custom operator by name.</brief>
    <return>
      <doc>The &amp;lt;GType&amp;gt; of the operator or &amp;lt;G\_TYPE\_INVALID&amp;gt; if not found</doc>
      <type name="GType" />
    </return>
    <argument id="cdn_operators_find::name" name="name">
      <doc>The name of the operator</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_operators_instantiate" name="cdn_operators_instantiate">
    <brief>Instantiate an operator from a name.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnOperator#API Reference::CdnOperator">CdnOperator</ref> or `NULL` if the operator with <ref ref="API Reference#cdn_operators_instantiate::name">cdn_operators_instantiate::name</ref> could not be found</doc>
      <type name="CdnOperator" qualifier="*" ref="API Reference::CdnOperator#API Reference::CdnOperator" transfer-ownership="full" />
    </return>
    <argument id="cdn_operators_instantiate::name" name="name">
      <doc>The name of the operator</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
    <argument id="cdn_operators_instantiate::expressions" name="expressions">
      <doc>the expressions</doc>
      <type name="GSList" qualifier="**" />
    </argument>
    <argument id="cdn_operators_instantiate::num_expressions" name="num_expressions">
      <doc>the number of expressions</doc>
      <type builtin="yes" name="gint" />
    </argument>
    <argument id="cdn_operators_instantiate::indices" name="indices">
      <doc>the indices</doc>
      <type name="GSList" qualifier="**" />
    </argument>
    <argument id="cdn_operators_instantiate::num_indices" name="num_indices">
      <doc>the number of indices</doc>
      <type builtin="yes" name="gint" />
    </argument>
    <argument id="cdn_operators_instantiate::args" name="args">
      <doc>the argument dimensions</doc>
      <type name="CdnStackArgs" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
    <argument id="cdn_operators_instantiate::context" name="context">
      <doc>the compile context</doc>
      <type name="CdnCompileContext" qualifier="*" ref="API Reference::CdnCompileContext#API Reference::CdnCompileContext" />
    </argument>
    <argument id="cdn_operators_instantiate::error" name="error">
      <doc>a &amp;lt;GError&amp;gt;.</doc>
      <type allow-none="yes" name="GError " qualifier="**" />
    </argument>
  </function>
  <function id="cdn_operators_register" name="cdn_operators_register">
    <brief>Register an operator</brief>
    <doc>Register an operator. The type <ref ref="API Reference#cdn_operators_register::gtype">cdn_operators_register::gtype</ref> should derive from <ref ref="API Reference::CdnOperator#API Reference::CdnOperator">CdnOperator</ref></doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_operators_register::gtype" name="gtype">
      <doc>A &amp;lt;GType&amp;gt;</doc>
      <type name="GType" />
    </argument>
  </function>
  <function id="cdn_operators_unregister" name="cdn_operators_unregister">
    <brief>Unregister an operator.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_operators_unregister::gtype" name="gtype">
      <doc>A &amp;lt;GType&amp;gt;</doc>
      <type name="GType" />
    </argument>
  </function>
  <function id="cdn_stack_arg_copy" name="cdn_stack_arg_copy">
    <brief>Copy the stack arg <ref ref="API Reference#cdn_stack_arg_copy::src">cdn_stack_arg_copy::src</ref> into the stack arg <ref ref="API Reference#cdn_stack_arg_copy::ret">cdn_stack_arg_copy::ret</ref>.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_stack_arg_copy::ret" name="ret">
      <doc>the return value of the copied stack arg</doc>
      <type name="CdnStackArg" out="yes" qualifier="*" ref="API Reference::CdnStackArg#API Reference::CdnStackArg" />
    </argument>
    <argument id="cdn_stack_arg_copy::src" name="src">
      <doc>the source stack arg to copy</doc>
      <type name="CdnStackArg" qualifier="*" ref="API Reference::CdnStackArg#API Reference::CdnStackArg" />
    </argument>
  </function>
  <function id="cdn_stack_args_copy" name="cdn_stack_args_copy">
    <brief>Copy the stack args from <ref ref="API Reference#cdn_stack_args_copy::src">cdn_stack_args_copy::src</ref> to <ref ref="API Reference#cdn_stack_args_copy::dest">cdn_stack_args_copy::dest</ref>.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_stack_args_copy::dest" name="dest">
      <doc>the destination <ref ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs">CdnStackArgs</ref></doc>
      <type name="CdnStackArgs" out="yes" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
    <argument id="cdn_stack_args_copy::src" name="src">
      <doc>the source <ref ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs">CdnStackArgs</ref></doc>
      <type name="CdnStackArgs" qualifier="*" ref="API Reference::CdnStackArgs#API Reference::CdnStackArgs" />
    </argument>
  </function>
  <function id="cdn_stack_manipulation_copy" name="cdn_stack_manipulation_copy">
    <brief>Copy the stack manipulation from <ref ref="API Reference#cdn_stack_manipulation_copy::src">cdn_stack_manipulation_copy::src</ref> to <ref ref="API Reference#cdn_stack_manipulation_copy::dest">cdn_stack_manipulation_copy::dest</ref>.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_stack_manipulation_copy::dest" name="dest">
      <doc>the destination <ref ref="API Reference::CdnStackManipulation#API Reference::CdnStackManipulation">CdnStackManipulation</ref></doc>
      <type name="CdnStackManipulation" out="yes" qualifier="*" ref="API Reference::CdnStackManipulation#API Reference::CdnStackManipulation" />
    </argument>
    <argument id="cdn_stack_manipulation_copy::src" name="src">
      <doc>the source <ref ref="API Reference::CdnStackManipulation#API Reference::CdnStackManipulation">CdnStackManipulation</ref></doc>
      <type name="CdnStackManipulation" qualifier="*" ref="API Reference::CdnStackManipulation#API Reference::CdnStackManipulation" />
    </argument>
  </function>
  <function id="cdn_value_dup_mini_object" name="cdn_value_dup_mini_object">
    <brief>Duplicate a mini object.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject">CdnMiniObject</ref></doc>
      <type name="CdnMiniObject" qualifier="*" ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject" transfer-ownership="full" />
    </return>
    <argument id="cdn_value_dup_mini_object::value" name="value">
      <doc>A &amp;lt;GValue&amp;gt;</doc>
      <type name="GValue" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_value_get_mini_object" name="cdn_value_get_mini_object">
    <brief>Get the mini object from the value</brief>
    <doc>Get the mini object from the value. The returned object is owned by the
value and should not be freed.

</doc>
    <return>
      <doc>A <ref ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject">CdnMiniObject</ref></doc>
      <type name="CdnMiniObject" qualifier="*" ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject" />
    </return>
    <argument id="cdn_value_get_mini_object::value" name="value">
      <doc>A &amp;lt;GValue&amp;gt;</doc>
      <type name="GValue" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_value_set_mini_object" name="cdn_value_set_mini_object">
    <brief>Set the contents of <ref ref="API Reference#cdn_value_set_mini_object::value">cdn_value_set_mini_object::value</ref> to the object specified by <ref ref="API Reference#cdn_value_set_mini_object::mini_object">cdn_value_set_mini_object::mini_object</ref>.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_value_set_mini_object::value" name="value">
      <doc>the &amp;lt;GValue&amp;gt;</doc>
      <type name="GValue" qualifier="*" />
    </argument>
    <argument id="cdn_value_set_mini_object::mini_object" name="mini_object">
      <doc>the object</doc>
      <type name="CdnMiniObject" qualifier="*" ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject" />
    </argument>
  </function>
  <function id="cdn_value_take_mini_object" name="cdn_value_take_mini_object">
    <brief>Set the contents of <ref ref="API Reference#cdn_value_take_mini_object::value">cdn_value_take_mini_object::value</ref> to the object specified by <ref ref="API Reference#cdn_value_take_mini_object::mini_object">cdn_value_take_mini_object::mini_object</ref>
    </brief>
    <doc>Set the contents of <ref ref="API Reference#cdn_value_take_mini_object::value">cdn_value_take_mini_object::value</ref> to the object specified by <ref ref="API Reference#cdn_value_take_mini_object::mini_object">cdn_value_take_mini_object::mini_object</ref>.
The ownership of <ref ref="API Reference#cdn_value_take_mini_object::mini_object">cdn_value_take_mini_object::mini_object</ref> is transferred to <ref ref="API Reference#cdn_value_take_mini_object::value">cdn_value_take_mini_object::value</ref>.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_value_take_mini_object::value" name="value">
      <doc>the &amp;lt;GValue&amp;gt;</doc>
      <type name="GValue" qualifier="*" />
    </argument>
    <argument id="cdn_value_take_mini_object::mini_object" name="mini_object">
      <doc>the object</doc>
      <type name="CdnMiniObject" qualifier="*" ref="API Reference::CdnMiniObject#API Reference::CdnMiniObject" transfer-ownership="full" />
    </argument>
  </function>
  <function id="cdn_variable_flags_from_string" name="cdn_variable_flags_from_string">
    <brief>Parse a string into a set of variable flags</brief>
    <doc>Parse a string into a set of variable flags. The flags can be specified
by their nicks (none, in, out, once, integrated) and separated by any
combination of spaces, comma's and/or pipes.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_variable_flags_from_string::flags" name="flags">
      <doc>The flags to parse</doc>
      <type builtin="yes" name="gchar" qualifier=" const *" />
    </argument>
    <argument id="cdn_variable_flags_from_string::add_flags" name="add_flags">
      <doc>*documentation missing...*</doc>
      <type name="CdnVariableFlags" qualifier="*" ref="API Reference#API Reference::CdnVariableFlags" />
    </argument>
    <argument id="cdn_variable_flags_from_string::remove_flags" name="remove_flags">
      <doc>*documentation missing...*</doc>
      <type name="CdnVariableFlags" qualifier="*" ref="API Reference#API Reference::CdnVariableFlags" />
    </argument>
  </function>
  <function id="cdn_variable_flags_to_string" name="cdn_variable_flags_to_string">
    <brief>Convert flags to a string representation.</brief>
    <return>
      <doc>the string representation of the flags</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_variable_flags_to_string::add_flags" name="add_flags">
      <doc>Flags to add <ref ref="API Reference#API Reference::CdnVariableFlags">CdnVariableFlags</ref></doc>
      <type name="CdnVariableFlags" ref="API Reference#API Reference::CdnVariableFlags" />
    </argument>
    <argument id="cdn_variable_flags_to_string::remove_flags" name="remove_flags">
      <doc>Flags to remove</doc>
      <type name="CdnVariableFlags" ref="API Reference#API Reference::CdnVariableFlags" />
    </argument>
  </function>
  <function id="cdn_variable_interface_error_quark" name="cdn_variable_interface_error_quark">
    <brief>Get the error quark for the variable interface error type.</brief>
    <return>
      <doc>a &amp;lt;GQuark&amp;gt; for the variable interface error type</doc>
      <type name="GQuark" />
    </return>
  </function>
</category>