<?xml version='1.0' encoding='utf-8'?>
<gobject:class xmlns:gobject="http://jessevdk.github.com/cldoc/gobject/1.0" id="API Reference::CdnParserContext" name="CdnParserContext" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Modeling language parsing context</brief>
  <doc>Modeling language parsing context.

&amp;lt;CdnParsercontext&amp;gt; is a class which implements a context for the codyn
modeling language. During parsing of codyn model files, API on the parser
context is called to construct the network. The context is responsible
for keeping track of the parser state as well as constructing the actual
objects, nodes and edges.</doc>
  <base access="public">
    <type name="GObject" />
  </base>
  <gobject:property id="API Reference::CdnParserContext::network" mode="construct" name="network">
    <type name="CdnNetwork" qualifier="*" ref="API Reference::CdnNetwork#API Reference::CdnNetwork" />
  </gobject:property>
  <function id="cdn_parser_context_add_event_set_variable" name="cdn_parser_context_add_event_set_variable">
    <brief>Add an set variable to the currently open events</brief>
    <doc>Add an set variable to the currently open events. The selector
<ref ref="API Reference::CdnParserContext#cdn_parser_context_add_event_set_variable::selector">cdn_parser_context_add_event_set_variable::selector</ref> is used to select target variables for the set.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_add_event_set_variable::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_add_event_set_variable::selector" name="selector">
      <doc>a <ref ref="API Reference::CdnSelector#API Reference::CdnSelector">CdnSelector</ref></doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
    <argument id="cdn_parser_context_add_event_set_variable::value" name="value">
      <doc>a value</doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </argument>
  </function>
  <function id="cdn_parser_context_add_integrator_variable" name="cdn_parser_context_add_integrator_variable">
    <brief>Add an integrator variable</brief>
    <doc>Add an integrator variable. Integrator variables are special since
they correspond to specific properties of the integrator (i.e. these
are not <ref ref="API Reference::CdnVariable#API Reference::CdnVariable">CdnVariable</ref>).</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_add_integrator_variable::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_add_integrator_variable::name" name="name">
      <doc>the name</doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </argument>
    <argument id="cdn_parser_context_add_integrator_variable::value" name="value">
      <doc>the value</doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </argument>
  </function>
  <function id="cdn_parser_context_apply_template" name="cdn_parser_context_apply_template">
    <brief>Apply the templates selected by <ref ref="API Reference::CdnParserContext#cdn_parser_context_apply_template::templates">cdn_parser_context_apply_template::templates</ref> to the objects selected by <ref ref="API Reference::CdnParserContext#cdn_parser_context_apply_template::targets">cdn_parser_context_apply_template::targets</ref>
    </brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_apply_template::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_apply_template::templates" name="templates">
      <doc>a selector</doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
    <argument id="cdn_parser_context_apply_template::targets" name="targets">
      <doc>a selector</doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
  </function>
  <function id="cdn_parser_context_current_selections" name="cdn_parser_context_current_selections">
    <brief>Description.</brief>
    <return>
      <doc>A &amp;lt;GSList&amp;gt;</doc>
      <type name="GSList" qualifier="*" />
    </return>
    <argument id="cdn_parser_context_current_selections::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_delete_selector" name="cdn_parser_context_delete_selector">
    <brief>Delete all objects selected by <ref ref="API Reference::CdnParserContext#cdn_parser_context_delete_selector::selector">cdn_parser_context_delete_selector::selector</ref>.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_delete_selector::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_delete_selector::selector" name="selector">
      <doc>a selector</doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_column" name="cdn_parser_context_get_column">
    <brief>Get the currently parsed token column start and end</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_get_column::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_get_column::start" name="start">
      <doc>the column start</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_get_column::end" name="end">
      <doc>the column end</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_error" name="cdn_parser_context_get_error">
    <brief>Get the parse error.</brief>
    <return>
      <doc>A &amp;lt;GError&amp;gt;</doc>
      <type name="GError" qualifier="*" />
    </return>
    <argument id="cdn_parser_context_get_error::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_error_lines" name="cdn_parser_context_get_error_lines">
    <brief>Get the lines of text on which the error occurred.</brief>
    <return>
      <doc>The lines on which the error occurred</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_get_error_lines::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_error_location" name="cdn_parser_context_get_error_location">
    <brief>Get the location of the current parser error.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_get_error_location::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_get_error_location::lstart" name="lstart">
      <doc>the line start.</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_get_error_location::lend" name="lend">
      <doc>the line end.</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_get_error_location::cstart" name="cstart">
      <doc>the column start.</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_get_error_location::cend" name="cend">
      <doc>the column end.</doc>
      <type builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_get_error_location::file" name="file">
      <doc>the file.</doc>
      <type name="GFile" out="yes" qualifier="**" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_file" name="cdn_parser_context_get_file">
    <brief>Get the current parsed file</brief>
    <doc>Get the current parsed file. If the current parsing stage is from memory
or a stream only, the result will be `NULL`.

</doc>
    <return>
      <doc>A &amp;lt;GFile&amp;gt;</doc>
      <type name="GFile" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_get_file::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_line" name="cdn_parser_context_get_line">
    <brief>Get the current line being parsed in the current input</brief>
    <doc>Get the current line being parsed in the current input. If not
`NULL`, <ref ref="API Reference::CdnParserContext#cdn_parser_context_get_line::lineno">cdn_parser_context_get_line::lineno</ref> will be set to the current line number being parsed.

</doc>
    <return>
      <doc>the line being parsed</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_get_line::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_get_line::lineno" name="lineno">
      <doc>result location for the current line</doc>
      <type allow-none="yes" builtin="yes" name="gint" out="yes" qualifier="*" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_line_at" name="cdn_parser_context_get_line_at">
    <brief>Get a line of text in the current input corresponding at the lin</brief>
    <doc>Get a line of text in the current input corresponding at the line
number <ref ref="API Reference::CdnParserContext#cdn_parser_context_get_line_at::lineno">cdn_parser_context_get_line_at::lineno</ref>.

</doc>
    <return>
      <doc>the line</doc>
      <type builtin="yes" name="gchar" qualifier="*" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_get_line_at::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_get_line_at::lineno" name="lineno">
      <doc>line number</doc>
      <type builtin="yes" name="gint" />
    </argument>
  </function>
  <function id="cdn_parser_context_get_scanner" name="cdn_parser_context_get_scanner">
    <brief>Description.</brief>
    <return>
      <doc>Description</doc>
      <type builtin="yes" name="gpointer" />
    </return>
    <argument id="cdn_parser_context_get_scanner::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_new" name="cdn_parser_context_new">
    <brief>Create a new parser context for <ref ref="API Reference::CdnParserContext#cdn_parser_context_new::network">cdn_parser_context_new::network</ref>
    </brief>
    <doc>Create a new parser context for <ref ref="API Reference::CdnParserContext#cdn_parser_context_new::network">cdn_parser_context_new::network</ref>. Initially, the parser does not contain
any input and hence will not parser anything. Use <ref ref="API Reference::CdnParserContext#cdn_parser_context_push_input">cdn_parser_context_push_input</ref>
and <ref ref="API Reference::CdnParserContext#cdn_parser_context_push_input_from_path">cdn_parser_context_push_input_from_path</ref> to push new input sources into
the parser.

</doc>
    <return>
      <doc>a new <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref></doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_new::network" name="network">
      <doc>a <ref ref="API Reference::CdnNetwork#API Reference::CdnNetwork">CdnNetwork</ref></doc>
      <type name="CdnNetwork" qualifier="*" ref="API Reference::CdnNetwork#API Reference::CdnNetwork" />
    </argument>
  </function>
  <function id="cdn_parser_context_parse" name="cdn_parser_context_parse">
    <brief>Parse the currently pushed input</brief>
    <doc>Parse the currently pushed input. If <ref ref="API Reference::CdnParserContext#cdn_parser_context_parse::push_network">cdn_parser_context_parse::push_network</ref> is set to `TRUE`,
then the network object associated with the parser will be pushed
onto the current scope.

</doc>
    <return>
      <doc>`TRUE` if parsing was successful, `FALSE` otherwise</doc>
      <type builtin="yes" name="gboolean" />
    </return>
    <argument id="cdn_parser_context_parse::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_parse::push_network" name="push_network">
      <doc>whether to push the network</doc>
      <type builtin="yes" name="gboolean" />
    </argument>
    <argument id="cdn_parser_context_parse::error" name="error">
      <doc>a &amp;lt;GError&amp;gt;.</doc>
      <type allow-none="yes" name="GError " qualifier="**" />
    </argument>
  </function>
  <function id="cdn_parser_context_peek_selector" name="cdn_parser_context_peek_selector">
    <brief>Description.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnSelector#API Reference::CdnSelector">CdnSelector</ref></doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </return>
    <argument id="cdn_parser_context_peek_selector::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_peek_string" name="cdn_parser_context_peek_string">
    <brief>Description.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString">CdnEmbeddedString</ref></doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </return>
    <argument id="cdn_parser_context_peek_string::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_pop" name="cdn_parser_context_pop">
    <brief>Description.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_pop::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_pop_input" name="cdn_parser_context_pop_input">
    <brief>Pop the currently being parsed input from the context.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_pop_input::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_pop_selector" name="cdn_parser_context_pop_selector">
    <brief>Description.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnSelector#API Reference::CdnSelector">CdnSelector</ref></doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_pop_selector::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_pop_string" name="cdn_parser_context_pop_string">
    <brief>Description.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString">CdnEmbeddedString</ref></doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" transfer-ownership="full" />
    </return>
    <argument id="cdn_parser_context_pop_string::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_previous_selections" name="cdn_parser_context_previous_selections">
    <brief>Description.</brief>
    <return>
      <doc>A &amp;lt;GSList&amp;gt;</doc>
      <type name="GSList" qualifier="*" />
    </return>
    <argument id="cdn_parser_context_previous_selections::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_push_input" name="cdn_parser_context_push_input">
    <brief>Push a new input into the context</brief>
    <doc>Push a new input into the context. Parsing will continue
from this input.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_push_input::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_push_input::file" name="file">
      <doc>the file.</doc>
      <type allow-none="yes" name="GFile" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_push_input::stream" name="stream">
      <doc>the input stream.</doc>
      <type allow-none="yes" name="GInputStream" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_push_input::isonce" name="isonce">
      <doc>whether only to process it once.</doc>
      <type builtin="yes" name="gboolean" />
    </argument>
  </function>
  <function id="cdn_parser_context_push_input_from_path" name="cdn_parser_context_push_input_from_path">
    <brief>&amp;lt;context&amp;gt; the context</brief>
    <doc>&amp;lt;context&amp;gt; the context.
<ref ref="API Reference::CdnParserContext#cdn_parser_context_push_input_from_path::filename">cdn_parser_context_push_input_from_path::filename</ref> the file name.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_push_input_from_path::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_push_input_from_path::filename" name="filename">
      <doc>*documentation missing...*</doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </argument>
    <argument id="cdn_parser_context_push_input_from_path::only_in_context" name="only_in_context">
      <doc>*documentation missing...*</doc>
      <type builtin="yes" name="gboolean" />
    </argument>
    <argument id="cdn_parser_context_push_input_from_path::isonce" name="isonce">
      <doc>*documentation missing...*</doc>
      <type builtin="yes" name="gboolean" />
    </argument>
  </function>
  <function id="cdn_parser_context_push_input_from_string" name="cdn_parser_context_push_input_from_string">
    <brief>Parse input from a string</brief>
    <doc>Parse input from a string. When <ref ref="API Reference::CdnParserContext#cdn_parser_context_push_input_from_string::only_in_context">cdn_parser_context_push_input_from_string::only_in_context</ref> is set, then parsing
will be ignored when there are is no open context.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_push_input_from_string::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_push_input_from_string::s" name="s">
      <doc>the string to parse</doc>
      <type builtin="yes" name="gchar" qualifier="*" />
    </argument>
    <argument id="cdn_parser_context_push_input_from_string::only_in_context" name="only_in_context">
      <doc>whether to only allow parsing when in a context</doc>
      <type builtin="yes" name="gboolean" />
    </argument>
  </function>
  <function id="cdn_parser_context_push_string" name="cdn_parser_context_push_string">
    <brief>Description.</brief>
    <return>
      <doc>A <ref ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString">CdnEmbeddedString</ref></doc>
      <type name="CdnEmbeddedString" qualifier="*" ref="API Reference::CdnEmbeddedString#API Reference::CdnEmbeddedString" />
    </return>
    <argument id="cdn_parser_context_push_string::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
  </function>
  <function id="cdn_parser_context_unapply_template" name="cdn_parser_context_unapply_template">
    <brief>Unapply the templates selected by <ref ref="API Reference::CdnParserContext#cdn_parser_context_unapply_template::templates">cdn_parser_context_unapply_template::templates</ref> to the objects selected by <ref ref="API Reference::CdnParserContext#cdn_parser_context_unapply_template::targets">cdn_parser_context_unapply_template::targets</ref>
    </brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="cdn_parser_context_unapply_template::self" name="self">
      <doc>a <ref ref="API Reference::CdnParserContext#API Reference::CdnParserContext">CdnParserContext</ref>.</doc>
      <type name="CdnParserContext" qualifier="*" ref="API Reference::CdnParserContext#API Reference::CdnParserContext" />
    </argument>
    <argument id="cdn_parser_context_unapply_template::templates" name="templates">
      <doc>a selector</doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
    <argument id="cdn_parser_context_unapply_template::targets" name="targets">
      <doc>a selector</doc>
      <type name="CdnSelector" qualifier="*" ref="API Reference::CdnSelector#API Reference::CdnSelector" />
    </argument>
  </function>
</gobject:class>